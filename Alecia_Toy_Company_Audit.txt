import random

class BotiumToysAudit:
    def __init__(self):
        self.assets = {
            "on_premises_equipment": 0,
            "employee_equipment": 0,
            "storefront_products": 0,
            "systems_and_services": 0,
            "internet_access": 0,
            "internal_network": 0,
            "data_retention_storage": 0,
            "legacy_systems": 0
        }
        self.risk_score = 8
        self.controls_implemented = [
            "nist_csf",
            "identify",
            "access_controls",
            "antivirus",
            "ids",
            "disaster_recovery",
            "password_policy"
        ]

    def identify_assets(self):
        print("Let's discover Botium Toys' hidden assets!")
        for asset in self.assets:
            self.assets[asset] = random.randint(1, 10)
            print(f"Found {self.assets[asset]} of {asset}")

    def assess_controls(self):
        print("Time to crack the security code!")
        controls = ["NIST CSF", "Identify", "Classify", "Impact Analysis", "Encryption", "Access Controls", "Firewall", "Antivirus", "IDS", "Disaster Recovery", "Password Policy", "Legacy System Maintenance", "Physical Security"]
        for control in controls:
            if control in self.controls_implemented:
                print(f"Implemented {control} - Great work!")
            else:
                print(f"Oops! {control} is missing. Let's fix that.")

    def calculate_risk(self):
        self.risk_score -= len(self.controls_implemented) // 3
        print(f"Risk score reduced to {self.risk_score}")

def main():
    audit = BotiumToysAudit()
    audit.identify_assets()
    audit.assess_controls()
    audit.calculate_risk()

if __name__ == "__main__":
    main()